   ___
  |_  |                 
    | | __ ___   ____ _ 
    | |/ _` \ \ / / _` |
/\__/ / (_| |\ V / (_| |
\____/ \__,_| \_/ \__,_|
                        
=========================================================
                   INDICE 
1. Tipos de datos
2. Variables y constantes
3. Comentarios
4. Operadores básicos
=========================================================
                TIPOS DE DATOS 
Tipos primitivos:
	
	Enteros			Flotantes
		- long (L)		- float (F)
		- int			- double (D)
		- short
		- byte
	
	Boleanos		Char
		- bool			-char

=========================================================
                VARIABLES Y CONSTANTES
                        (syntax)

Variables:
	
	<Tipo> nombre = <valor>;
	ej:
	int numero = 100;

Constantes:

	final <Tipo> nombre = <valor>;
	ej:
	final int y = 100;

========================================================
                   COMENTARIOS

Una linea:
	// Comentario

 Varias lineas: 
	/* Comentario
		otro comentario */

========================================================
                   OPERADORES

Aritmeticos			Logicos,booleanos
	- "+"				- "<"
	- "-"				- ">"
	- "*"				- "!="
	- "/"				- "=="
    					- "&&"
    					- "||"

Incremento			Concatenación
	- "++"				- "+"
	- "--"
	- "+="
	- "-="

========================================================
                    CONDICIONALES

IF,ELSE IF, ELSE:

    Sintaxis:
        if(condicion)
        {
            código;
        }
        else if (condicion)
        {
            código;
        }
        else
        {
            código;
        }

SWITCH:
    
    switch(valor)
    {
        case <valor>:
            código;
            break;

        case <valor>:
            código;
            break;

        default:
            código;
    }

    "default" se ejecuta si los otros casos no coinciden.

========================================================
                      BUCLES 
FOR:
    for(variable;condición;incremento/decremento)
    {
        código;
    }

    ej:
    for(int i=0;i<10;i++)
    {
        código;
    }

WHILE:
    while(condición)
    {
        código;
    }
    ej:
    while(i<2)
    {
        código;
    }

FOREACH:
    foreach(<variable> in <array>)
    {
        código;
    }

    ej:
    foreach(int i in listaNumeros)
    {
        código;
    }
========================================================
                       ARRAYS
Sintaxis:
    // Array que guarda 5 elementos.
    <tipo>[] nombre = new <tipo>[5];

    // Array que guarda elementos "1,2,3,4"
    <tipo>[] nombre = {1,2,3,4};

    // Array bidimensional de 5 arrays con 5 elementos cada uno.
    <tipo>[][] nombre = new <tipo>[5][5];

    // Añadir valor al indice x de un array.
    NombreArray[indice] = <valor>;

========================================================
                    CLASES
Sintaxis:
    class <nombre>
    {

    }

    En un archivo solo puede haber solo 1 clase "publica"
    y esa clase debe tener el nombre del archivo.
                        
               CLASES ABSTRACTAS

Son clases que contienen metodos sin desarrolar, y que las
clases que los hereden estan obligadas a desarrolar.

Sintaxis:
    abstract class
    {
        // código
    }

========================================================
                MODIFICADORES DE ACCESO

+------------------------------------------+
| Modificador| clase|package|subclase|todos|
| public     |  si  |  si   |  si    | si  |
| protected  |  si  |  si   |  si    | no  |
| private    |  si  |  no   |  no    | no  |
| default    |  si  |  si   |  no    | no  |
+------------+------+-------+--------+-----+

========================================================
                    CONSTRUCTORES

Usa la palabra reservada "super" para llamar al constructor
de la clase padre.

Sintaxis:

    class A
    {
        public void A(){};
    }

    class B extends A
    {
        super(); // heredar constructor de A.
    }

========================================================
			        PAQUETES

IMPORTAR PAQUETES:

    Sintaxis:
        import <nombrePaquete>.<nombreClase>;

    Si se quiere importar todas las clases de un paquete:

        import <nombrePaquete>.*;

    Por defecto siempre se importa el paquete java.lang;

CREAR PAQUETES:
    Uso de la palabra "package" junto al <nombrePaquete>
    al que pertenece al principio del documento. Solo se
    puede usar una vez por archivo.

    Sintaxis:
        package <nombrePaquete>;

    Compilar:
        javac -d <directorio> archivo.java

=========================================================
                     HERENCIA

Uso de la palabra reservada "extends"

Sintaxis:

    class A
    {
        // código
    }

    class B extends A
    {
        // código
    }

NOTA: no es posible la herencia de multiples clases, pero si
      de multiples interfaces.
=======================================================
                    INPUT Y OUTPUT
                       (consola)

Para ingresar valores se puede usar metodos de las
clases "javax.util.scanner" y "javas.swing.JOptionPane"

SCANNER:
        Syntaxis:
            Scanner input = new Scanner(System.in);
            <tipo> variable = input.next<tipo>();

            ej:
            Scanner input = new Scanner(System.in);
            String x = input.nextLine();

        Con la clase "scanner" al poseer funciones no staticas
        hay que instansiarla. Sus métodos "next.<tipo>" pueden
        devolver valores de diferente tipo primitivo:
        .__________________________________________.
        | MÉTODO         | REGRESA VALOR...        |
        | nextBoolean()  | bool                    |
        | nextByte()     | byte                    |
        | nextDouble()   | double                  |
        | nextFloat()    | float                   |
        | nextInt()      | int                     |
        | nextLine()     | String                  |
        | nextLong()     | long                    |
        | nextShort()    | short                   |
        .------------------------------------------.

JOptionPane:
        Syntaxis:
            String x = JOptionPane.ShowInputDialog("texto para mostrar");
        
        JOptionPane muestra una ventana grafica para introducir un valor
        y regresa el valor introducido de tipo String.


